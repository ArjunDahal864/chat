// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.12.3
// source: inbox.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Inbox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	UserID       string `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	SenderID     string `protobuf:"bytes,3,opt,name=senderID,proto3" json:"senderID,omitempty"`
	InboxHash    string `protobuf:"bytes,4,opt,name=inboxHash,proto3" json:"inboxHash,omitempty"`
	LastMsg      string `protobuf:"bytes,5,opt,name=lastMsg,proto3" json:"lastMsg,omitempty"`
	Seen         bool   `protobuf:"varint,6,opt,name=seen,proto3" json:"seen,omitempty"`
	UnSeenNumber int64  `protobuf:"varint,7,opt,name=unSeenNumber,proto3" json:"unSeenNumber,omitempty"`
	Deleted      bool   `protobuf:"varint,8,opt,name=deleted,proto3" json:"deleted,omitempty"`
}

func (x *Inbox) Reset() {
	*x = Inbox{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inbox_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Inbox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Inbox) ProtoMessage() {}

func (x *Inbox) ProtoReflect() protoreflect.Message {
	mi := &file_inbox_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Inbox.ProtoReflect.Descriptor instead.
func (*Inbox) Descriptor() ([]byte, []int) {
	return file_inbox_proto_rawDescGZIP(), []int{0}
}

func (x *Inbox) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Inbox) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *Inbox) GetSenderID() string {
	if x != nil {
		return x.SenderID
	}
	return ""
}

func (x *Inbox) GetInboxHash() string {
	if x != nil {
		return x.InboxHash
	}
	return ""
}

func (x *Inbox) GetLastMsg() string {
	if x != nil {
		return x.LastMsg
	}
	return ""
}

func (x *Inbox) GetSeen() bool {
	if x != nil {
		return x.Seen
	}
	return false
}

func (x *Inbox) GetUnSeenNumber() int64 {
	if x != nil {
		return x.UnSeenNumber
	}
	return 0
}

func (x *Inbox) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

type ListInboxsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The parent resource name, for example, "shelves/shelf1"
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The maximum number of items to return.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// The next_page_token value returned from a previous List request, if any.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListInboxsRequest) Reset() {
	*x = ListInboxsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inbox_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInboxsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInboxsRequest) ProtoMessage() {}

func (x *ListInboxsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inbox_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInboxsRequest.ProtoReflect.Descriptor instead.
func (*ListInboxsRequest) Descriptor() ([]byte, []int) {
	return file_inbox_proto_rawDescGZIP(), []int{1}
}

func (x *ListInboxsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListInboxsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListInboxsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListInboxs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inboxs []*Inbox `protobuf:"bytes,1,rep,name=Inboxs,proto3" json:"Inboxs,omitempty"`
}

func (x *ListInboxs) Reset() {
	*x = ListInboxs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inbox_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInboxs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInboxs) ProtoMessage() {}

func (x *ListInboxs) ProtoReflect() protoreflect.Message {
	mi := &file_inbox_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInboxs.ProtoReflect.Descriptor instead.
func (*ListInboxs) Descriptor() ([]byte, []int) {
	return file_inbox_proto_rawDescGZIP(), []int{2}
}

func (x *ListInboxs) GetInboxs() []*Inbox {
	if x != nil {
		return x.Inboxs
	}
	return nil
}

var File_inbox_proto protoreflect.FileDescriptor

var file_inbox_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd5, 0x01, 0x0a, 0x05,
	0x49, 0x6e, 0x62, 0x6f, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x62,
	0x6f, 0x78, 0x48, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e,
	0x62, 0x6f, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x4d,
	0x73, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x73,
	0x67, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x73, 0x65, 0x65, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x6e, 0x53, 0x65, 0x65, 0x6e, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x75, 0x6e, 0x53,
	0x65, 0x65, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x22, 0x67, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x62, 0x6f, 0x78,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x2c, 0x0a, 0x0a,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x73, 0x12, 0x1e, 0x0a, 0x06, 0x49, 0x6e,
	0x62, 0x6f, 0x78, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6e, 0x62,
	0x6f, 0x78, 0x52, 0x06, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x73, 0x32, 0x79, 0x0a, 0x0c, 0x49, 0x6e,
	0x62, 0x6f, 0x78, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x47, 0x65,
	0x74, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x73, 0x12, 0x12, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e,
	0x62, 0x6f, 0x78, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0b, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x73, 0x30, 0x01, 0x12, 0x1d, 0x0a, 0x0b, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x12, 0x06, 0x2e, 0x49, 0x6e, 0x62, 0x6f,
	0x78, 0x1a, 0x06, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x64, 0x64,
	0x49, 0x6e, 0x62, 0x6f, 0x78, 0x12, 0x06, 0x2e, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x1a, 0x06, 0x2e,
	0x49, 0x6e, 0x62, 0x6f, 0x78, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_inbox_proto_rawDescOnce sync.Once
	file_inbox_proto_rawDescData = file_inbox_proto_rawDesc
)

func file_inbox_proto_rawDescGZIP() []byte {
	file_inbox_proto_rawDescOnce.Do(func() {
		file_inbox_proto_rawDescData = protoimpl.X.CompressGZIP(file_inbox_proto_rawDescData)
	})
	return file_inbox_proto_rawDescData
}

var file_inbox_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_inbox_proto_goTypes = []interface{}{
	(*Inbox)(nil),             // 0: Inbox
	(*ListInboxsRequest)(nil), // 1: ListInboxsRequest
	(*ListInboxs)(nil),        // 2: ListInboxs
	(*Empty)(nil),             // 3: Empty
}
var file_inbox_proto_depIdxs = []int32{
	0, // 0: ListInboxs.Inboxs:type_name -> Inbox
	1, // 1: InboxService.GetInboxs:input_type -> ListInboxsRequest
	0, // 2: InboxService.DeleteInbox:input_type -> Inbox
	0, // 3: InboxService.AddInbox:input_type -> Inbox
	2, // 4: InboxService.GetInboxs:output_type -> ListInboxs
	3, // 5: InboxService.DeleteInbox:output_type -> Empty
	0, // 6: InboxService.AddInbox:output_type -> Inbox
	4, // [4:7] is the sub-list for method output_type
	1, // [1:4] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_inbox_proto_init() }
func file_inbox_proto_init() {
	if File_inbox_proto != nil {
		return
	}
	file_friend_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_inbox_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Inbox); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inbox_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInboxsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inbox_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInboxs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_inbox_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_inbox_proto_goTypes,
		DependencyIndexes: file_inbox_proto_depIdxs,
		MessageInfos:      file_inbox_proto_msgTypes,
	}.Build()
	File_inbox_proto = out.File
	file_inbox_proto_rawDesc = nil
	file_inbox_proto_goTypes = nil
	file_inbox_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// InboxServiceClient is the client API for InboxService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InboxServiceClient interface {
	GetInboxs(ctx context.Context, in *ListInboxsRequest, opts ...grpc.CallOption) (InboxService_GetInboxsClient, error)
	DeleteInbox(ctx context.Context, in *Inbox, opts ...grpc.CallOption) (*Empty, error)
	AddInbox(ctx context.Context, in *Inbox, opts ...grpc.CallOption) (*Inbox, error)
}

type inboxServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInboxServiceClient(cc grpc.ClientConnInterface) InboxServiceClient {
	return &inboxServiceClient{cc}
}

func (c *inboxServiceClient) GetInboxs(ctx context.Context, in *ListInboxsRequest, opts ...grpc.CallOption) (InboxService_GetInboxsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_InboxService_serviceDesc.Streams[0], "/InboxService/GetInboxs", opts...)
	if err != nil {
		return nil, err
	}
	x := &inboxServiceGetInboxsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InboxService_GetInboxsClient interface {
	Recv() (*ListInboxs, error)
	grpc.ClientStream
}

type inboxServiceGetInboxsClient struct {
	grpc.ClientStream
}

func (x *inboxServiceGetInboxsClient) Recv() (*ListInboxs, error) {
	m := new(ListInboxs)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *inboxServiceClient) DeleteInbox(ctx context.Context, in *Inbox, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/InboxService/DeleteInbox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inboxServiceClient) AddInbox(ctx context.Context, in *Inbox, opts ...grpc.CallOption) (*Inbox, error) {
	out := new(Inbox)
	err := c.cc.Invoke(ctx, "/InboxService/AddInbox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InboxServiceServer is the server API for InboxService service.
type InboxServiceServer interface {
	GetInboxs(*ListInboxsRequest, InboxService_GetInboxsServer) error
	DeleteInbox(context.Context, *Inbox) (*Empty, error)
	AddInbox(context.Context, *Inbox) (*Inbox, error)
}

// UnimplementedInboxServiceServer can be embedded to have forward compatible implementations.
type UnimplementedInboxServiceServer struct {
}

func (*UnimplementedInboxServiceServer) GetInboxs(*ListInboxsRequest, InboxService_GetInboxsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetInboxs not implemented")
}
func (*UnimplementedInboxServiceServer) DeleteInbox(context.Context, *Inbox) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInbox not implemented")
}
func (*UnimplementedInboxServiceServer) AddInbox(context.Context, *Inbox) (*Inbox, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddInbox not implemented")
}

func RegisterInboxServiceServer(s *grpc.Server, srv InboxServiceServer) {
	s.RegisterService(&_InboxService_serviceDesc, srv)
}

func _InboxService_GetInboxs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListInboxsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InboxServiceServer).GetInboxs(m, &inboxServiceGetInboxsServer{stream})
}

type InboxService_GetInboxsServer interface {
	Send(*ListInboxs) error
	grpc.ServerStream
}

type inboxServiceGetInboxsServer struct {
	grpc.ServerStream
}

func (x *inboxServiceGetInboxsServer) Send(m *ListInboxs) error {
	return x.ServerStream.SendMsg(m)
}

func _InboxService_DeleteInbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Inbox)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InboxServiceServer).DeleteInbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InboxService/DeleteInbox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InboxServiceServer).DeleteInbox(ctx, req.(*Inbox))
	}
	return interceptor(ctx, in, info, handler)
}

func _InboxService_AddInbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Inbox)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InboxServiceServer).AddInbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InboxService/AddInbox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InboxServiceServer).AddInbox(ctx, req.(*Inbox))
	}
	return interceptor(ctx, in, info, handler)
}

var _InboxService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "InboxService",
	HandlerType: (*InboxServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteInbox",
			Handler:    _InboxService_DeleteInbox_Handler,
		},
		{
			MethodName: "AddInbox",
			Handler:    _InboxService_AddInbox_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetInboxs",
			Handler:       _InboxService_GetInboxs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "inbox.proto",
}
